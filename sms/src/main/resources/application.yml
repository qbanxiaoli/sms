server:
  port: 8001

spring:
  # 服务名
  application:
    name: sms-service
  cloud:
    loadbalancer:
      # 开启重试机制
      retry:
        enabled: true

  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://123.207.85.155:3306/sms?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: Jj9/i3.LqiFB
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 1
    minIdle: 1
    maxActive: 20
    maxWait: 60000
    validationQuery: select 'x'
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    #配置监控统计拦截的filters，去掉后监控界面SQL无法统计，“wall”用于防火墙
    filters: stat,wall,log4j

  jpa:
    # Specify the DBMS
    database: MYSQL
    # Show or not log for each sql query
    show-sql: true
    hibernate:
      # Hibernate ddl auto (create, create-drop, update)
      # create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
      # create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
      # update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
      # validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
      ddl-auto: update
      # Naming strategy (org.hibernate.cfg.DefaultComponentSafeNamingStrategy)
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl

  #i18n configuration(添加语言国际化支持)
  messages:
    basename: i18n/messages
eureka:
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
    # 是否优先使用IP地址作为主机名的标识，默认为false
    prefer-ip-address: true
    # 客户端向服务端发送心跳（服务续约任务）的调用时间间隔，默认为30秒
    lease-renewal-interval-in-seconds: 30
    # 服务端在收到最后一次心跳之后的等待时间上限（服务时效的时间），默认为90秒
    lease-expiration-duration-in-seconds: 90
  client:
    service-url:
      defaultZone: http://admin:123456@${eureka.host:123.207.85.155}:${eureka.port:1111}/eureka/

hystrix:
  command:
    default:
      # 断路器的超时时间需要大于Ribbon的超时时间*重试次数，不然不会触发重试，单位毫秒
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 600000

# 当访问到故障请求时，会再尝试访问一次当前实例（MaxAutoRetries），如果不行，就会换一个实例进行访问，
# 如果还是不行，再换一个实例访问（MaxAutoRetriesNextServer），如果依然不行，返回失败信息。
ribbon:
  # 请求连接的超时时间，单位毫秒，若请求出现连接超时，会自动进行重试
  ConnectTimeout: 60000
  # 请求处理的超时时间，单位毫秒，若请求的处理时间超过该配置且依赖服务的请求还未响应，会自动进行重试
  ReadTimeout: 60000
  # 对所有操作请求都进行重试
  OkToRetryOnAllOperations: true
  # 切换实例的重试次数
  MaxAutoRetriesNextServer: 2
  # 对当前实例的重试次数
  MaxAutoRetries: 1

#pagehelper分页插件
pagehelper:
  # 配置数据库方言，不配置也行，分页插件会自动检测当前的数据库链接，自动选择合适的分页方式，
  # 使用 SqlServer2012 数据库时，需要手动指定为 sqlserver2012，否则会使用 SqlServer2005 的方式进行分页。
  helper-dialect: mysql
  # 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页，
  # pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
  reasonable: true
  # 默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 ,
  # 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）
  page-size-zero: true

mybatis:
  configuration:
    # 开启驼峰命名转换
    map-underscore-to-camel-case: true

swagger:
  show: true
